AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create an RDS database instance

Parameters:
  StageId:
    Description: Environment Designation (development, staging, production, etc.)
    Type: String

  StageIdLowercase:
    Description: Environment Designation (development, staging, production, etc.)
    Type: String

  Client:
    Description: Name of the client the stack is being created for
    Type: String

  PlatformName:
    Description: DNS-compliant name for the Platform
    Type: String

  PlatformNameLowercase:
    Description: Lowercase DNS-compliant name for the Platform
    Type: String

  DBSnapshotArn:
    Description: Provide the ARN to restore RDS instance from a snapshot
    Type: String

  AZCount:
    Description: Number of Availabilty Zones that the RDS instance may be deployed to
    Type: Number


Conditions:
  3AZCondition:
    Fn::Or:
      - !Equals ["3", !Ref AZCount]
      - !Condition 4AZCondition
  4AZCondition:
    Fn::Or:
      - !Equals ["4", !Ref AZCount]
      - !Equals ["5", !Ref AZCount]
      - !Equals ["6", !Ref AZCount]
      - !Equals ["7", !Ref AZCount]
      - !Equals ["8", !Ref AZCount]


Resources:

  subnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:
        !Sub "${StageId} Database Subnets"
      SubnetIds:
        - Fn::ImportValue:
            !Sub "${PlatformName}-Vpc-PrivateSubnet1AID"
        - Fn::ImportValue:
            !Sub "${PlatformName}-Vpc-PrivateSubnet2AID"
        - Fn::ImportValue:
            !Sub "${PlatformName}-Vpc-PrivateSubnet3AID"
        - Fn::If:
            - 4AZCondition
            - Fn::ImportValue:
                !Sub "${PlatformName}-Vpc-PrivateSubnet4AID"
            - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value:
            !Sub "${StageId} Database Subnets"
        - Key: Billing
          Value: !Ref Client
        - Key: Client
          Value: !Ref Client
        - Key: Purpose
          Value: Network
        - Key: Environment
          Value:
            !Ref StageId

  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        !Sub "${StageId}-DB-Security"
      GroupDescription: Allow access to the RDS database
      VpcId:
        Fn::ImportValue:
          !Sub "${PlatformName}-Vpc-VPCID"
      Tags:
        - Key: Name
          Value:
            !Sub "${StageId}-DB-Security"
        - Key: Billing
          Value: !Ref Client
        - Key: Client
          Value: !Ref Client
        - Key: Purpose
          Value: Security
        - Key: Environment
          Value:
            !Ref StageId

  rdsInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      VPCSecurityGroups:
        - !Ref securityGroup
#      AllocatedStorage: "20"
#      AllowMajorVersionUpgrade: false
#      AutoMinorVersionUpgrade: true
#      CopyTagsToSnapshot: true
      DBInstanceClass: db.t3.small
      DBSnapshotIdentifier: !Ref DBSnapshotArn
      DBSubnetGroupName:
        !Ref subnetGroup
      Engine: postgres
      MultiAZ: false
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value:
            !Sub "${StageId}-${PlatformName}-DB"
        - Key: Billing
          Value: !Ref Client
        - Key: Client
          Value: !Ref Client
        - Key: Purpose
          Value: Database
        - Key: Environment
          Value:
            !Ref StageId


Outputs:
  RdsSecurityGroupId:
    Description: ID of the security group tied to the RDS database
    Value: !Ref securityGroup
    Export:
      Name: !Sub "${AWS::StackName}-RDSSecurityGroup"
  RdsName:
    Description: Autogenerated name of the database instance
    Value: !Ref rdsInstance
    Export:
      Name: !Sub "${AWS::StackName}-RDSName"
  RdsEndpoint:
    Description: Endpoint URL to access the database
    Value: !GetAtt rdsInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RDSEndpoint"
